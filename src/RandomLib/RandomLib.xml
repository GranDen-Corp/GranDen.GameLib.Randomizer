<?xml version="1.0"?>
<doc>
    <assembly>
        <name>RandomLib</name>
    </assembly>
    <members>
        <member name="T:RandomLib.ProportionRandomGenerator`1">
            <summary>
            Random select choice based on proportional probability
            </summary>
            <typeparam name="T">chosen choice object type</typeparam>
        </member>
        <member name="M:RandomLib.ProportionRandomGenerator`1.#ctor(MathNet.Numerics.Random.RandomSource)">
            <summary>
            Create the RNG object
            </summary>
            <param name="randomSource">optional, assigned it if you need controllable results like running unit test.</param>
        </member>
        <member name="P:RandomLib.ProportionRandomGenerator`1.ProbabilityEntries">
            <summary>
            Probability distribution data, probability values don't have to sum to a fixed total number.
            </summary>
        </member>
        <member name="M:RandomLib.ProportionRandomGenerator`1.Draw">
            <summary>
            Select one chose
            </summary>
            <returns></returns>
        </member>
        <member name="M:RandomLib.ProportionRandomGenerator`1.DuplicatedConsecutiveDraws(System.Int32)">
            <summary>
            Consecutively select multiple choices, results may be duplicated
            </summary>
            <param name="times">Choose counts</param>
            <returns></returns>
        </member>
        <member name="M:RandomLib.ProportionRandomGenerator`1.NonDuplicatedConsecutiveDraws(System.Int32)">
            <summary>
            Consecutively select multiple choices and may go on until all items were chosen, results will not duplicated.
            </summary>
            <param name="times"></param>
            <returns></returns>
        </member>
        <member name="T:RandomLib.RandomNumberGenerator">
            <summary>
            Helper class for easily generate random number
            </summary>
        </member>
        <member name="M:RandomLib.RandomNumberGenerator.CreateRandomInt(System.Int32,System.Int32,MathNet.Numerics.Random.RandomSource)">
            <summary>
            Generate a random Integer from [minValue , maxValue]
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="rng"></param>
            <returns></returns>
        </member>
        <member name="M:RandomLib.RandomNumberGenerator.CreateRandomDouble(System.Double,System.Double,MathNet.Numerics.Random.RandomSource)">
            <summary>
            Generate a random Double from [minValue , maxValue]
            </summary>
            <param name="minValue"></param>
            <param name="maxValue"></param>
            <param name="rng"></param>
            <returns></returns>
        </member>
    </members>
</doc>
