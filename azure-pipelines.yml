# ASP.NET Core
# Build and test ASP.NET Core projects targeting .NET Core.
# Add steps that run tests, create a NuGet package, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/dotnet-core

trigger:
- dev
- master
- feature/*
- bugfix/*

pool:
  vmImage: 'ubuntu-latest'

variables:
  buildConfiguration: 'Release'
  sourceProject: 'src/**/*.csproj'
  testNetCoreProject: 'test/**/*Test.csproj'

stages:
- stage: Build_stage
  condition: and(succeeded(), eq(variables['Build.Reason'], 'PullRequest'))
  displayName: Build source project(s)
  jobs:
  - job: Build
    steps:
    - task: DotNetCoreCLI@2
      inputs:
        command: restore
        projects: '$(sourceProject)'
        feedsToUse: 'select'
      displayName: "Restore source project's NuGet package(s)"
    - task: DotNetCoreCLI@2
      inputs:
        command: build
        projects: '$(sourceProject)'
        arguments: '--configuration $(buildConfiguration)'
      displayName: "Build source project"

- stage: Test_stage
  condition: and(not(failed('Build_stage')), in(variables['Build.Reason'], 'IndividualCI', 'BatchedCI', 'PullRequest'))
  dependsOn: 
    - Build_stage
  displayName: Run test project(s)
  jobs:
  - job: Test
    steps:
      - task: DotNetCoreCLI@2
        inputs:
          command: test
          projects: '$(testNetCoreProject)'
          arguments: '--configuration $(buildConfiguration)  /p:CollectCoverage=true'
          publishTestResults: true
        displayName: "Run NetCore test project"
      - task: PublishCodeCoverageResults@1
        inputs:
          codeCoverageTool: 'Cobertura'
          summaryFileLocation: '$(Build.SourcesDirectory)/**/TestResult/Coverage/*.cobertura.xml'
          failIfCoverageEmpty: true
        displayName: "Publish code coverage report"

- stage: Publish_stage
  condition: and(not(failed('Build_stage')), succeeded('Test_stage'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  dependsOn:
    - Build_stage
    - Test_stage
  displayName: Publish debug version NuGet package(s)
  jobs:
  - job: Publish
    steps:
      - task: PowerShell@2
        name: Fetch_Nuget_Ver
        inputs:
          pwsh: true
          targetType: inline
          script: |
            $packageVer = & "$(System.DefaultWorkingDirectory)/scripts/get_build_version.ps1"
            echo "##vso[task.setvariable variable=NugetVerMajor;]$($packageVer.Major)"
            echo "##vso[task.setvariable variable=NugetVerMinor;]$($packageVer.Minor)"
            echo "##vso[task.setvariable variable=NugetVerPatch;]$($packageVer.Patch)"
            echo "##vso[task.setvariable variable=NugetVerRevis;]$($packageVer.Patch)"
        displayName: "Fetch version number from Directory.Build.props file"
      - task: DotNetCoreCLI@2
        inputs:
          command: pack
          packagesToPack: '$(sourceProject)'
          verbosityPack: minimal
          configuration: 'debug'
          includeSymbols: true
          includesource: true
          versioningScheme: byPrereleaseNumber
          majorVersion: '$(NugetVerMajor)'
          minorVersion: '$(NugetVerMinor)'
          patchVersion: '$(NugetVerPatch)'
        displayName: "Pack test NuGet package(s)"
      - task: NuGetCommand@2
        inputs:
          command: push
          packagesToPush: '$(Pipeline.Workspace)/**/*.nupkg'
          nuGetFeedType: 'internal'
          publishVstsFeed: 'GranDen'
          allowPackageConflicts: true
        displayName: "Publish test NuGet package to Azure Artifacts"